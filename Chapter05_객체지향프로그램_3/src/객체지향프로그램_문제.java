
public class 객체지향프로그램_문제 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		다음의 코드에 정의된 변수들을 종류별로 구분해서 적으시오.
		classPlayingCard { 
		int kind; 
		intnum; 
		//------------------ 인스턴스 변수 => Heap => 프로그램 종료시까지 유지 => 멤버변수 => 8byte 메모리 크기는 인스턴스 변수만 보고 따진다. => new 사용시마다 메모리가 따로 배정된다
		staticint width; 
		staticint height; 
		//------------------정적변수 => 공유변수 => MethodArea에 들어간다
			생성자 => 변수 초기화
		PlayingCard(int k, int n) { 
		kind = k; 
		num = n; 
			//k.n 매개변수 => 지역변수 일종 =>
		stack : 메모리 자체 관리 {} 종료되면 자동 삭제
		} 
		인스턴스변수 :
		정적변수(공유변수) :
		지역변수 :

		
		1) 클래스명과 동일 2)여러개 생성이 가능=오버로딩 3)역할 => 객체 생성시 호출, 변수에 초기화
//		
//		다음 중 생성자에 대한 설명으로 옳지 않은 것은? (모두 고르시오) c,e / c,e
//				a. 모든 생성자의 이름은 클래스의 이름과 동일해야한다.
//				 b. 생성자는 객체를 생성하기 위한 것이다.
//				 c. 클래스에는 생성자가 반드시 하나 이상 있어야 한다.
//				 d. 생성자가 없는 클래스는 컴파일러가 기본 생성자를 추가한다. => 기본 생성자 (매개변수가 없는 생성자) = default 생성자
//				 e. 생성자는 오버로딩 할 수 없다.
		
this는 모든 클래스에 존재 => static = 자신의 객체 => 는 사용 불가능
		
//		다음 중 this에 대한 설명으로 맞지 않은 것은? (모두 고르시오) a,b / 
//				a. 객체 자신을 가리키는 참조변수이다.
//				b. 클래스 내에서라면 어디서든 사용할 수 있다.
//				c. 지역변수와 인스턴스변수를 구별할 때 사용한다.
//				d. 클래스 메서드 내에서는 사용할 수 없다. // 클래스 메서드=static 메소드
//
		중복 메소드 정의 => 같은 메소드명으로 새로운 기능을 추가=>오버로딩
				1) 메소드명이 동일
				2) 매개변수의 개수나 데이터형이 다르다
 				3) 리턴형이 뭐가 오든상관없다
				4) 접근지정어도 관계없다
		
//				다음 중 오버로딩이 성립하기 위한 조건이 아닌 것은? (모두 고르시오) c,d /c,d
//				a. 메서드의 이름이 같아야 한다.
//				b. 매개변수의 개수나 타입이 달라야 한다.
//				c. 리턴타입이 달라야 한다.
//				d. 매개변수의 이름이 달라야 한다.
//		
//				오버로딩의 조건
//				1. ( method  ) 이름이 같아야 한다./메소드
//				2. ( 데이터형 )의 개수 또는 타입이 달라야 한다./매개변수
//				3. 매개변수는 같고 ( 데이터형 )이 다른 경우는 오버로딩이 성립되지 않는다./리턴형   
//
//					다음 중 아래의 add메서드를 올바르게 오버로딩 한 것은? (모두 고르시오) a,c / b,c,d / d는 인트도 받을 수 있어서 비추천한다
//				long add(int a, int b) { return a+b; }
//				a. long add(int x, int y) { return x+y; }
//				b. long add(long a, long b) { return a+b; }
//				c. int add(byte a, byte b) { return a+b; }
//				d. int add(long a, int b) { return (int)(a+b); }
//
class에서 초기화
=> 인스턴스 
//
//				다음 중 초기화에 대한 설명으로 옳지 않은 것은? (모두 고르시오) d / c,e
//				a. 멤버변수는 자동 초기화되므로 초기화하지 않고도 값을 참고할 수 있다.
//				b. 지역변수는 사용하기 전에 반드시 초기화해야 한다. => 지역변수는 초기화가 안되어있다.
//				c. 초기화 블럭보다 생성자가 먼저 수행된다. => 기본값 - 명시적초기화 - static {} - 인스턴스 {} - 생성자 순서이다.
//				d. 명시적 초기화를 제일 우선적으로 고려해야 한다.
//				e. 클래스변수보다 인스턴스변수가 먼저 초기화된다.
//
//				다음 중 인스턴스변수의 초기화 순서가 올바른 것은? a
//				a. 기본값-명시적초기화-초기화블럭-생성자
//				b. 기본값-명시적초기화-생성자-초기화블럭
//				c. 기본값-초기화블럭-명시적초기화-생성자
//				d. 기본값-초기화블럭-생성자-명시적초기화
//
//				다음 중 지역변수에 대한 설명으로 옳지 않은 것은? (모두 고르시오) /a,e
//				a. 자동 초기화되므로 별도의 초기화가 필요없다.
//				b. 지역변수가 선언된 메서드가 종료되면 지역변수도 함께 소멸된다.
//				c. 메서드의 매개변수로 선언된 변수도 지역변수이다.
//				d. 클래스변수나 인스턴스변수보다 메모리 부담이 적다.
//				e. 힙(heap)영역에 생성되며 가비지컬렉터에 의해 소멸된다./stack이며 =지역변수 는 자동으로 소멸된다.

	}

}
